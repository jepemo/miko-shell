name: miko-shell-dev
container:
  provider: docker
  image: golang:1.23-alpine
  setup:
    - apk add --no-cache git make curl wget bash
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    - go install golang.org/x/tools/cmd/goimports@latest
shell:
  startup:
    # Test variables for automatic environment capture
    - export PROJECT_VERSION=1.2.3
    - export BUILD_TARGET=production
    - export DEBUG_MODE=true
    - export GO_VERSION=1.23
    - |
      cat <<'EOF'
             _ _               _       _ _ 
       _____|_| |_ ___     ___| |_ ___| | |
      |     | | '_| . |___|_ -|   | -_| | |
      |_|_|_|_|_,_|___|   |___|_|_|___|_|_|

      EOF
    - echo "==> miko-shell development environment ready!"
    - 'echo "==> Project directory: $(pwd)"'
    - 'echo "==> Host: $MIKO_HOST_OS/$MIKO_HOST_ARCH"'
    - 'echo "==> Go version: $(go version)"'
    - export PS1="\[\e[32m\]\u@\h:\w\[\e[0m\]$ "
  scripts:
    - name: deps
      description: Download and tidy dependencies
      commands:
        - echo "Downloading dependencies..."
        - go mod download
        - go mod tidy
        - echo "Dependencies updated!"

    - name: build
      description: Build for host platform using MIKO_HOST_OS and MIKO_HOST_ARCH
      commands:
        - echo "==> Building miko-shell for host platform..."
        - echo "Project version $PROJECT_VERSION"
        - echo "Build target $BUILD_TARGET"
        - echo "Target platform $MIKO_HOST_OS/$MIKO_HOST_ARCH"
        - go mod tidy
        - VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "$PROJECT_VERSION")
        - GOOS=$MIKO_HOST_OS GOARCH=$MIKO_HOST_ARCH go build -ldflags="-X 'miko-shell/cmd.version=${VERSION}'" -o miko-shell-host .
        - cp -f miko-shell-host miko-shell
        - echo "==> Built miko-shell-host for $MIKO_HOST_OS/$MIKO_HOST_ARCH successfully!"

    - name: build-linux
      description: Build for Linux (container platform)
      commands:
        - echo "==> Building miko-shell for Linux..."
        - go mod tidy
        - go build -o miko-shell .
        - echo "==> Built miko-shell for Linux successfully!"

    - name: test
      description: Run tests
      commands:
        - echo "Running tests..."
        - go mod tidy
        - go test ./...

    - name: clean
      description: Clean build artifacts
      commands:
        - echo "Cleaning..."
        - rm -f miko-shell miko-shell-host
        - rm -rf build
        - echo "Cleaned successfully!"

    - name: build-multi
      description: Build for multiple platforms
      commands:
        - echo "==> Building for multiple platforms..."
        - mkdir -p build
        - go mod tidy
        - VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        - echo "Building for Linux AMD64..."
        - GOOS=linux GOARCH=amd64 go build -ldflags="-X 'miko-shell/cmd.version=${VERSION}'" -o build/miko-shell-linux-amd64 .
        - echo "Building for macOS Intel..."
        - GOOS=darwin GOARCH=amd64 go build -ldflags="-X 'miko-shell/cmd.version=${VERSION}'" -o build/miko-shell-macos-amd64 .
        - echo "Building for macOS Apple Silicon..."
        - GOOS=darwin GOARCH=arm64 go build -ldflags="-X 'miko-shell/cmd.version=${VERSION}'" -o build/miko-shell-macos-arm64 .
        - echo "Building for Windows..."
        - GOOS=windows GOARCH=amd64 go build -ldflags="-X 'miko-shell/cmd.version=${VERSION}'" -o build/miko-shell-windows.exe .
        - echo "==> All builds completed!"
        - ls -la build/

    - name: fmt
      description: Format code
      commands:
        - echo "Formatting code..."
        - go fmt ./...
        - echo "Code formatted!"

    - name: lint
      description: Run linters
      commands:
        - echo "Running linters..."
        - golangci-lint run
        - echo "Linters completed!"

    - name: version
      description: Show version
      commands:
        - go version
        - ./miko-shell --version || echo "miko-shell not built yet"

    - name: dev
      description: Development cycle - deps + build + test
      commands:
        - echo "==> Running development cycle..."
        - go mod download
        - go mod tidy
        - echo "Building for host platform ($MIKO_HOST_OS/$MIKO_HOST_ARCH)..."
        - VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        - GOOS=$MIKO_HOST_OS GOARCH=$MIKO_HOST_ARCH go build -ldflags="-X 'miko-shell/cmd.version=${VERSION}'" -o miko-shell-host .
        - go test ./...
        - echo "==> Development cycle completed!"

    - name: help
      description: Show available scripts
      commands:
        - echo "==> Available miko-shell development commands"
        - echo ""
        - echo "==> Build Commands"
        - echo "  build       - Build for host platform ($MIKO_HOST_OS/$MIKO_HOST_ARCH)"
        - echo "  build-linux - Build for Linux (container platform)"
        - echo "  build-multi - Build for multiple platforms"
        - echo ""
        - echo "==> Development"
        - echo "  deps        - Download and tidy dependencies"
        - echo "  test        - Run tests"
        - echo "  dev         - Full development cycle"
        - echo ""
        - echo "==> Utilities"
        - echo "  fmt         - Format code"
        - echo "  lint        - Run linters"
        - echo "  clean       - Clean build artifacts"
        - echo "  version     - Show version info"
        - echo "  help        - Show this help"
        - echo ""
        - echo "==> Environment Tests"
        - echo "  env-info    - Show startup environment variables"
        - echo "  db-migrate  - Test database connection with env vars"

    - name: env-info
      description: Show environment variables set during startup
      commands:
        - echo "=== Environment Information ==="
        - echo "Project Version $PROJECT_VERSION"
        - echo "Go Version $GO_VERSION"
        - echo "Debug Mode $DEBUG_MODE"
        - echo "Build Target $BUILD_TARGET"
        - echo "=== PATH ==="
        - echo $PATH

    - name: version-info
      description: Show version information using env vars
      commands:
        - echo "Building miko-shell version $PROJECT_VERSION"
        - echo "Go version requirement $GO_VERSION"
        - echo "Target environment $BUILD_TARGET"
        - echo "Debug enabled $DEBUG_MODE"
        - go version
        - echo ""
        - echo "==> Platform Info"
        - echo "  Host OS $MIKO_HOST_OS"
        - echo "  Host Arch $MIKO_HOST_ARCH"
